{
    "pipes": [],
    "interfaces": [
        {
            "name": "SaveData",
            "id": "interface-SaveData-738af05d677657067a01ec264dc0c348b0c5d5e801ea747671e3572fdba858b3e78f38d2ae3d083349015ba036e784628633e1d112208912e480339c74cd0971",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Input, ViewChild } from '@angular/core';\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Output,\r\n  AfterViewInit,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\ninterface SaveData {\r\n  text: string;\r\n  file: string | null;\r\n  mentions: string[];\r\n  hashtags: string[];\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-rich-textarea',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './richTextarea.component.html',\r\n  styleUrls: ['./richTextarea.component.css'],\r\n})\r\nexport class RichTextAreaComponent implements AfterViewInit {\r\n  @ViewChild('textArea', { static: false })\r\n  textArea!: ElementRef<HTMLDivElement>;\r\n  @ViewChild('mentionDropdown', { static: false })\r\n  mentionDropdown!: ElementRef<HTMLDivElement>;\r\n  @ViewChild('hashtagDropdown', { static: false })\r\n  hashtagDropdown!: ElementRef<HTMLDivElement>;\r\n\r\n  @Output() sendMessage = new EventEmitter<string>();\r\n  @Output() fileAttached = new EventEmitter<File>();\r\n  @Output() saveData = new EventEmitter<SaveData>();\r\n  @Input() placeholder = 'Type your message...';\r\n\r\n  showEmojiPicker = false;\r\n  showMoreEmojis = false;\r\n  showMentionDropdown = false;\r\n  showHashtagDropdown = false;\r\n  mentionList: string[] = ['@JohnDoe', '@JaneSmith', '@User123'];\r\n  hashtagList: string[] = ['#Angular', '#Tailwind', '#Coding'];\r\n\r\n  selectedFile: File | null = null;\r\n\r\n  constructor(private renderer: Renderer2) {}\r\n\r\n  ngAfterViewInit() {\r\n    if (!this.textArea?.nativeElement) {\r\n      console.warn('TextArea not initialized.');\r\n      return;\r\n    }\r\n    const textAreaEl = this.textArea.nativeElement;\r\n    if (!textAreaEl.innerText?.trim()) {\r\n      textAreaEl.innerText = this.placeholder;\r\n    }\r\n  }\r\n\r\n  clearPlaceholderIfNeeded() {\r\n    const textContent = this.textArea?.nativeElement?.innerText?.trim() || '';\r\n    if (textContent === this.placeholder) {\r\n      this.textArea.nativeElement.innerText = '';\r\n    }\r\n  }\r\n\r\n  restorePlaceholderIfEmpty() {\r\n    const textContent = this.textArea?.nativeElement?.innerText?.trim() || '';\r\n    if (!textContent) {\r\n      this.textArea.nativeElement.innerText = this.placeholder;\r\n    }\r\n  }\r\n\r\n  onFocus() {\r\n    this.clearPlaceholderIfNeeded();\r\n  }\r\n\r\n  onBlur() {\r\n    this.restorePlaceholderIfEmpty();\r\n  }\r\n\r\n  onKeydown(event: KeyboardEvent) {\r\n    this.clearPlaceholderIfNeeded();\r\n    if (!this.textArea?.nativeElement) return;\r\n\r\n    const textContent = this.textArea.nativeElement.innerText.trim();\r\n    if (!textContent) return;\r\n\r\n    if (event.key === ' ' || event.key === 'Enter') {\r\n      this.showMentionDropdown = false;\r\n      this.showHashtagDropdown = false;\r\n    }\r\n  }\r\n\r\n  onInput() {\r\n    this.clearPlaceholderIfNeeded();\r\n    this.autoExpand();\r\n\r\n    if (!this.textArea?.nativeElement) return;\r\n\r\n    const textContent = this.textArea.nativeElement.innerText || '';\r\n    const words = textContent.split(/\\s+/);\r\n\r\n    this.showMentionDropdown = false;\r\n    this.showHashtagDropdown = false;\r\n\r\n    // Check all words for mentions and hashtags\r\n    words.forEach((word) => {\r\n      if (word.startsWith('@')) {\r\n        this.showMentionDropdown = true;\r\n      }\r\n      if (word.startsWith('#')) {\r\n        this.showHashtagDropdown = true;\r\n      }\r\n    });\r\n\r\n    if (this.showMentionDropdown || this.showHashtagDropdown) {\r\n      this.updateDropdownPosition();\r\n    }\r\n  }\r\n\r\n  insertEmoji(emoji: string) {\r\n    if (this.textArea?.nativeElement) {\r\n      this.textArea.nativeElement.innerText += emoji;\r\n      this.autoExpand();\r\n    }\r\n  }\r\n\r\n  toggleEmojiPicker() {\r\n    this.showEmojiPicker = !this.showEmojiPicker;\r\n  }\r\n\r\n  toggleMoreEmojis() {\r\n    this.showMoreEmojis = !this.showMoreEmojis;\r\n  }\r\n\r\n  updateDropdownPosition() {\r\n    const selection = window.getSelection();\r\n    if (!selection || selection.rangeCount === 0) return;\r\n\r\n    const range = selection.getRangeAt(0);\r\n    const rect = range.getBoundingClientRect();\r\n    const textAreaRect = this.textArea?.nativeElement?.getBoundingClientRect();\r\n\r\n    if (!textAreaRect) return;\r\n\r\n    if (this.showMentionDropdown && this.mentionDropdown?.nativeElement) {\r\n      this.renderer.setStyle(\r\n        this.mentionDropdown.nativeElement,\r\n        'top',\r\n        `${rect.bottom - textAreaRect.top}px`\r\n      );\r\n      this.renderer.setStyle(\r\n        this.mentionDropdown.nativeElement,\r\n        'left',\r\n        `${rect.left - textAreaRect.left}px`\r\n      );\r\n    }\r\n\r\n    if (this.showHashtagDropdown && this.hashtagDropdown?.nativeElement) {\r\n      this.renderer.setStyle(\r\n        this.hashtagDropdown.nativeElement,\r\n        'top',\r\n        `${rect.bottom - textAreaRect.top}px`\r\n      );\r\n      this.renderer.setStyle(\r\n        this.hashtagDropdown.nativeElement,\r\n        'left',\r\n        `${rect.left - textAreaRect.left}px`\r\n      );\r\n    }\r\n  }\r\n\r\n  selectMention(mention: string) {\r\n    const text = this.textArea?.nativeElement?.innerText.trim();\r\n    if (text && text.endsWith('@')) {\r\n      this.textArea.nativeElement.innerText = text.slice(0, -1) + mention;\r\n      this.showMentionDropdown = false;\r\n      this.autoExpand();\r\n    }\r\n  }\r\n\r\n  selectHashtag(hashtag: string) {\r\n    const text = this.textArea?.nativeElement?.innerText.trim();\r\n    if (text && text.endsWith('#')) {\r\n      this.textArea.nativeElement.innerText = text.slice(0, -1) + hashtag;\r\n      this.showHashtagDropdown = false;\r\n      this.autoExpand();\r\n    }\r\n  }\r\n\r\n  autoExpand() {\r\n    if (!this.textArea?.nativeElement) return;\r\n    this.renderer.setStyle(this.textArea.nativeElement, 'height', 'auto');\r\n    this.renderer.setStyle(\r\n      this.textArea.nativeElement,\r\n      'height',\r\n      `${this.textArea.nativeElement.scrollHeight}px`\r\n    );\r\n  }\r\n  onFileSelected(event: Event) {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files?.length) {\r\n      this.selectedFile = input.files[0];\r\n      this.fileAttached.emit(this.selectedFile);\r\n    }\r\n  }\r\n\r\n  saveMessage() {\r\n    const message = this.textArea?.nativeElement?.innerText?.trim();\r\n    if (!message || message === this.placeholder) {\r\n      console.log('Message is empty. Not saving.');\r\n      return;\r\n    }\r\n\r\n    const extractedMentions = message.match(/@\\w+/g) || [];\r\n    const extractedHashtags = message.match(/#\\w+/g) || [];\r\n\r\n    const dataToSave: SaveData = {\r\n      text: message,\r\n      file: this.selectedFile ? this.selectedFile.name : null,\r\n      mentions: extractedMentions,\r\n      hashtags: extractedHashtags,\r\n    };\r\n\r\n    console.log('Saving Data:', dataToSave);\r\n    this.saveData.emit(dataToSave);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "hashtags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mentions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4a0e060db7ffd16a679766d8091dfca8a2ed6c08cda8975d4756d1434716949e4060c639031b77f2ca38977983acb0622a2fa77db817a21a979f35ebeca9f233",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"primary\" | \"accent\" | \"outline\" | \"text\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-button',\r\n  standalone: true,\r\n  templateUrl: './button.component.html',\r\n  styles: [], // No inline styles; Tailwind handles it\r\n})\r\nexport class ButtonComponent {\r\n  @Input() variant: 'primary' | 'accent' | 'outline' | 'text' = 'primary';\r\n  @Input() disabled = false;\r\n  @Input() class = ''; // Allow users to pass custom Tailwind classes\r\n\r\n  @HostBinding('class') get hostClasses() {\r\n    const baseClasses =\r\n      'inline-flex items-center justify-center px-4 py-2 rounded-md font-medium transition-colors duration-200';\r\n    const variantClasses = {\r\n      primary:\r\n        'bg-blue-600 text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2',\r\n      accent:\r\n        'bg-purple-600 text-white hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2',\r\n      outline:\r\n        'border border-gray-300 text-gray-700 hover:bg-gray-100 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2',\r\n      text: 'text-gray-700 hover:bg-gray-100 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2',\r\n    };\r\n    const disabledClasses = this.disabled\r\n      ? 'opacity-50 cursor-not-allowed'\r\n      : '';\r\n\r\n    return `${baseClasses} ${variantClasses[this.variant]} ${disabledClasses} ${\r\n      this.class\r\n    }`.trim();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            },
            "templateData": "<button [disabled]=\"disabled\">\r\n  <ng-content></ng-content>\r\n</button>\r\n"
        },
        {
            "name": "RichTextAreaComponent",
            "id": "component-RichTextAreaComponent-738af05d677657067a01ec264dc0c348b0c5d5e801ea747671e3572fdba858b3e78f38d2ae3d083349015ba036e784628633e1d112208912e480339c74cd0971",
            "file": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-rich-textarea",
            "styleUrls": [
                "./richTextarea.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./richTextarea.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "defaultValue": "'Type your message...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileAttached",
                    "defaultValue": "new EventEmitter<File>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "saveData",
                    "defaultValue": "new EventEmitter<SaveData>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                },
                {
                    "name": "sendMessage",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hashtagDropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'hashtagDropdown', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "hashtagList",
                    "defaultValue": "['#Angular', '#Tailwind', '#Coding']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "mentionDropdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mentionDropdown', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "mentionList",
                    "defaultValue": "['@JohnDoe', '@JaneSmith', '@User123']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "selectedFile",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "showEmojiPicker",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "showHashtagDropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "showMentionDropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "showMoreEmojis",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "textArea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textArea', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "autoExpand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearPlaceholderIfNeeded",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "insertEmoji",
                    "args": [
                        {
                            "name": "emoji",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emoji",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restorePlaceholderIfEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectHashtag",
                    "args": [
                        {
                            "name": "hashtag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hashtag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectMention",
                    "args": [
                        {
                            "name": "mention",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mention",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleEmojiPicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMoreEmojis",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDropdownPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Input, ViewChild } from '@angular/core';\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Output,\r\n  AfterViewInit,\r\n  Renderer2,\r\n} from '@angular/core';\r\n\r\ninterface SaveData {\r\n  text: string;\r\n  file: string | null;\r\n  mentions: string[];\r\n  hashtags: string[];\r\n}\r\n\r\n@Component({\r\n  selector: 'lib-rich-textarea',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './richTextarea.component.html',\r\n  styleUrls: ['./richTextarea.component.css'],\r\n})\r\nexport class RichTextAreaComponent implements AfterViewInit {\r\n  @ViewChild('textArea', { static: false })\r\n  textArea!: ElementRef<HTMLDivElement>;\r\n  @ViewChild('mentionDropdown', { static: false })\r\n  mentionDropdown!: ElementRef<HTMLDivElement>;\r\n  @ViewChild('hashtagDropdown', { static: false })\r\n  hashtagDropdown!: ElementRef<HTMLDivElement>;\r\n\r\n  @Output() sendMessage = new EventEmitter<string>();\r\n  @Output() fileAttached = new EventEmitter<File>();\r\n  @Output() saveData = new EventEmitter<SaveData>();\r\n  @Input() placeholder = 'Type your message...';\r\n\r\n  showEmojiPicker = false;\r\n  showMoreEmojis = false;\r\n  showMentionDropdown = false;\r\n  showHashtagDropdown = false;\r\n  mentionList: string[] = ['@JohnDoe', '@JaneSmith', '@User123'];\r\n  hashtagList: string[] = ['#Angular', '#Tailwind', '#Coding'];\r\n\r\n  selectedFile: File | null = null;\r\n\r\n  constructor(private renderer: Renderer2) {}\r\n\r\n  ngAfterViewInit() {\r\n    if (!this.textArea?.nativeElement) {\r\n      console.warn('TextArea not initialized.');\r\n      return;\r\n    }\r\n    const textAreaEl = this.textArea.nativeElement;\r\n    if (!textAreaEl.innerText?.trim()) {\r\n      textAreaEl.innerText = this.placeholder;\r\n    }\r\n  }\r\n\r\n  clearPlaceholderIfNeeded() {\r\n    const textContent = this.textArea?.nativeElement?.innerText?.trim() || '';\r\n    if (textContent === this.placeholder) {\r\n      this.textArea.nativeElement.innerText = '';\r\n    }\r\n  }\r\n\r\n  restorePlaceholderIfEmpty() {\r\n    const textContent = this.textArea?.nativeElement?.innerText?.trim() || '';\r\n    if (!textContent) {\r\n      this.textArea.nativeElement.innerText = this.placeholder;\r\n    }\r\n  }\r\n\r\n  onFocus() {\r\n    this.clearPlaceholderIfNeeded();\r\n  }\r\n\r\n  onBlur() {\r\n    this.restorePlaceholderIfEmpty();\r\n  }\r\n\r\n  onKeydown(event: KeyboardEvent) {\r\n    this.clearPlaceholderIfNeeded();\r\n    if (!this.textArea?.nativeElement) return;\r\n\r\n    const textContent = this.textArea.nativeElement.innerText.trim();\r\n    if (!textContent) return;\r\n\r\n    if (event.key === ' ' || event.key === 'Enter') {\r\n      this.showMentionDropdown = false;\r\n      this.showHashtagDropdown = false;\r\n    }\r\n  }\r\n\r\n  onInput() {\r\n    this.clearPlaceholderIfNeeded();\r\n    this.autoExpand();\r\n\r\n    if (!this.textArea?.nativeElement) return;\r\n\r\n    const textContent = this.textArea.nativeElement.innerText || '';\r\n    const words = textContent.split(/\\s+/);\r\n\r\n    this.showMentionDropdown = false;\r\n    this.showHashtagDropdown = false;\r\n\r\n    // Check all words for mentions and hashtags\r\n    words.forEach((word) => {\r\n      if (word.startsWith('@')) {\r\n        this.showMentionDropdown = true;\r\n      }\r\n      if (word.startsWith('#')) {\r\n        this.showHashtagDropdown = true;\r\n      }\r\n    });\r\n\r\n    if (this.showMentionDropdown || this.showHashtagDropdown) {\r\n      this.updateDropdownPosition();\r\n    }\r\n  }\r\n\r\n  insertEmoji(emoji: string) {\r\n    if (this.textArea?.nativeElement) {\r\n      this.textArea.nativeElement.innerText += emoji;\r\n      this.autoExpand();\r\n    }\r\n  }\r\n\r\n  toggleEmojiPicker() {\r\n    this.showEmojiPicker = !this.showEmojiPicker;\r\n  }\r\n\r\n  toggleMoreEmojis() {\r\n    this.showMoreEmojis = !this.showMoreEmojis;\r\n  }\r\n\r\n  updateDropdownPosition() {\r\n    const selection = window.getSelection();\r\n    if (!selection || selection.rangeCount === 0) return;\r\n\r\n    const range = selection.getRangeAt(0);\r\n    const rect = range.getBoundingClientRect();\r\n    const textAreaRect = this.textArea?.nativeElement?.getBoundingClientRect();\r\n\r\n    if (!textAreaRect) return;\r\n\r\n    if (this.showMentionDropdown && this.mentionDropdown?.nativeElement) {\r\n      this.renderer.setStyle(\r\n        this.mentionDropdown.nativeElement,\r\n        'top',\r\n        `${rect.bottom - textAreaRect.top}px`\r\n      );\r\n      this.renderer.setStyle(\r\n        this.mentionDropdown.nativeElement,\r\n        'left',\r\n        `${rect.left - textAreaRect.left}px`\r\n      );\r\n    }\r\n\r\n    if (this.showHashtagDropdown && this.hashtagDropdown?.nativeElement) {\r\n      this.renderer.setStyle(\r\n        this.hashtagDropdown.nativeElement,\r\n        'top',\r\n        `${rect.bottom - textAreaRect.top}px`\r\n      );\r\n      this.renderer.setStyle(\r\n        this.hashtagDropdown.nativeElement,\r\n        'left',\r\n        `${rect.left - textAreaRect.left}px`\r\n      );\r\n    }\r\n  }\r\n\r\n  selectMention(mention: string) {\r\n    const text = this.textArea?.nativeElement?.innerText.trim();\r\n    if (text && text.endsWith('@')) {\r\n      this.textArea.nativeElement.innerText = text.slice(0, -1) + mention;\r\n      this.showMentionDropdown = false;\r\n      this.autoExpand();\r\n    }\r\n  }\r\n\r\n  selectHashtag(hashtag: string) {\r\n    const text = this.textArea?.nativeElement?.innerText.trim();\r\n    if (text && text.endsWith('#')) {\r\n      this.textArea.nativeElement.innerText = text.slice(0, -1) + hashtag;\r\n      this.showHashtagDropdown = false;\r\n      this.autoExpand();\r\n    }\r\n  }\r\n\r\n  autoExpand() {\r\n    if (!this.textArea?.nativeElement) return;\r\n    this.renderer.setStyle(this.textArea.nativeElement, 'height', 'auto');\r\n    this.renderer.setStyle(\r\n      this.textArea.nativeElement,\r\n      'height',\r\n      `${this.textArea.nativeElement.scrollHeight}px`\r\n    );\r\n  }\r\n  onFileSelected(event: Event) {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files?.length) {\r\n      this.selectedFile = input.files[0];\r\n      this.fileAttached.emit(this.selectedFile);\r\n    }\r\n  }\r\n\r\n  saveMessage() {\r\n    const message = this.textArea?.nativeElement?.innerText?.trim();\r\n    if (!message || message === this.placeholder) {\r\n      console.log('Message is empty. Not saving.');\r\n      return;\r\n    }\r\n\r\n    const extractedMentions = message.match(/@\\w+/g) || [];\r\n    const extractedHashtags = message.match(/#\\w+/g) || [];\r\n\r\n    const dataToSave: SaveData = {\r\n      text: message,\r\n      file: this.selectedFile ? this.selectedFile.name : null,\r\n      mentions: extractedMentions,\r\n      hashtags: extractedHashtags,\r\n    };\r\n\r\n    console.log('Saving Data:', dataToSave);\r\n    this.saveData.emit(dataToSave);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".text-area {\r\n  min-height: 100px;\r\n  width: 100%;\r\n  background: transparent;\r\n  color: #333;\r\n  border-radius: 5px;\r\n  outline: none;\r\n}\r\n\r\n.dark-mode {\r\n  background: #1a202c;\r\n  color: white;\r\n}\r\n\r\nbutton {\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n",
                    "styleUrl": "./richTextarea.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"p-4 border rounded-lg shadow-md bg-white dark:bg-gray-900\">\r\n  <!-- Text Input Area -->\r\n  <div\r\n    #textArea\r\n    contenteditable=\"true\"\r\n    class=\"w-full min-h-[100px] border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n    (keydown)=\"onKeydown($event)\"\r\n    (focus)=\"onFocus()\"\r\n    (blur)=\"onBlur()\"\r\n    (input)=\"onInput()\"\r\n    [attr.data-placeholder]=\"placeholder\"\r\n  >\r\n    <!-- Mention Dropdown -->\r\n    <div\r\n      *ngIf=\"showMentionDropdown\"\r\n      class=\"absolute bg-white border rounded shadow-md p-2 mt-1\"\r\n    >\r\n      <button\r\n        *ngFor=\"let mention of mentionList\"\r\n        (click)=\"selectMention(mention)\"\r\n        class=\"block p-1 hover:bg-gray-200\"\r\n      >\r\n        {{ mention }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Hashtag Dropdown -->\r\n    <div\r\n      *ngIf=\"showHashtagDropdown\"\r\n      class=\"absolute bg-white border rounded shadow-md p-2 mt-1\"\r\n    >\r\n      <button\r\n        *ngFor=\"let hashtag of hashtagList\"\r\n        (click)=\"selectHashtag(hashtag)\"\r\n        class=\"block p-1 hover:bg-gray-200\"\r\n      >\r\n        {{ hashtag }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Action Buttons Row -->\r\n  <div class=\"flex items-center justify-between mt-3\">\r\n    <!-- Emoji Button (LEFT SIDE) -->\r\n    <div class=\"relative flex items-center\">\r\n      <button\r\n        class=\"text-2xl p-2 rounded-full hover:bg-gray-200\"\r\n        (click)=\"toggleEmojiPicker()\"\r\n      >\r\n        😊\r\n      </button>\r\n\r\n      <!-- ✅ Fix: Emoji Picker is Now Positioned to the RIGHT of the Button -->\r\n      <div\r\n        *ngIf=\"showEmojiPicker\"\r\n        class=\"absolute top-0 left-full ml-2 bg-white border rounded-lg shadow-lg p-2 w-56 z-50\"\r\n      >\r\n        <!-- First Row of Emojis -->\r\n        <div class=\"grid grid-cols-6 gap-2\">\r\n          <button\r\n            class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n            (click)=\"insertEmoji('😊')\"\r\n          >\r\n            😊\r\n          </button>\r\n          <button\r\n            class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n            (click)=\"insertEmoji('😂')\"\r\n          >\r\n            😂\r\n          </button>\r\n          <button\r\n            class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n            (click)=\"insertEmoji('❤️')\"\r\n          >\r\n            ❤️\r\n          </button>\r\n          <button\r\n            class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n            (click)=\"insertEmoji('🔥')\"\r\n          >\r\n            🔥\r\n          </button>\r\n          <button\r\n            class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n            (click)=\"insertEmoji('👍')\"\r\n          >\r\n            👍\r\n          </button>\r\n          <button\r\n            class=\"text-xl p-2 hover:bg-gray-100 rounded-lg text-blue-500 font-bold\"\r\n            (click)=\"toggleMoreEmojis()\"\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Extra Emojis with Horizontal Scroll Below -->\r\n        <div *ngIf=\"showMoreEmojis\" class=\"overflow-x-auto mt-2 border-t pt-2\">\r\n          <div class=\"flex space-x-2 w-max\">\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('😍')\"\r\n            >\r\n              😍\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('😎')\"\r\n            >\r\n              😎\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('🎉')\"\r\n            >\r\n              🎉\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('🥳')\"\r\n            >\r\n              🥳\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('🤩')\"\r\n            >\r\n              🤩\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('😆')\"\r\n            >\r\n              😆\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('😜')\"\r\n            >\r\n              😜\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('🤔')\"\r\n            >\r\n              🤔\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('😭')\"\r\n            >\r\n              😭\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('😏')\"\r\n            >\r\n              😏\r\n            </button>\r\n            <button\r\n              class=\"text-xl p-2 hover:bg-gray-100 rounded-lg\"\r\n              (click)=\"insertEmoji('🙌')\"\r\n            >\r\n              🙌\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Attach & Save Buttons -->\r\n    <div class=\"flex space-x-2\">\r\n      <label\r\n        class=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg cursor-pointer hover:bg-gray-300\"\r\n      >\r\n        Attach\r\n        <input type=\"file\" class=\"hidden\" (change)=\"onFileSelected($event)\" />\r\n      </label>\r\n      <button\r\n        class=\"px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\"\r\n        (click)=\"saveMessage()\"\r\n      >\r\n        Save\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'accent',\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Accent Button</lib-button>`,\r\n  }),\r\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\r\n  stories: ['../**/*.@(mdx|stories.@(js|jsx|ts|tsx))'],\r\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\r\n  framework: {\r\n    name: '@storybook/angular',\r\n    options: {},\r\n  },\r\n  docs: {\r\n    autodocs: true,\r\n    defaultName: 'Docs',\r\n  },\r\n}"
            },
            {
                "name": "CustomStyled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    class: 'text-lg px-6 py-3 bg-green-500 hover:bg-green-600',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [class]=\"class\">Custom Styled Button</lib-button>`,\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    disabled: true,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Disabled Button</lib-button>`,\r\n  }),\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Components/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['primary', 'accent', 'outline', 'text'],\r\n      description: 'Button style variant',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Disables the button',\r\n    },\r\n    class: {\r\n      control: 'text',\r\n      description: 'Additional Tailwind CSS classes for customization',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Outline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'outline',\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Outline Button</lib-button>`,\r\n  }),\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Primary Button</lib-button>`,\r\n  }),\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<RichTextAreaComponent>",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Text",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    variant: 'text',\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Text Button</lib-button>`,\r\n  }),\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'accent',\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Accent Button</lib-button>`,\r\n  }),\r\n}"
                },
                {
                    "name": "CustomStyled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    class: 'text-lg px-6 py-3 bg-green-500 hover:bg-green-600',\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [class]=\"class\">Custom Styled Button</lib-button>`,\r\n  }),\r\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    disabled: true,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Disabled Button</lib-button>`,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Components/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    variant: {\r\n      control: 'select',\r\n      options: ['primary', 'accent', 'outline', 'text'],\r\n      description: 'Button style variant',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n      description: 'Disables the button',\r\n    },\r\n    class: {\r\n      control: 'text',\r\n      description: 'Additional Tailwind CSS classes for customization',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Outline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'outline',\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Outline Button</lib-button>`,\r\n  }),\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'primary',\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Primary Button</lib-button>`,\r\n  }),\r\n}"
                },
                {
                    "name": "Text",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    variant: 'text',\r\n    disabled: false,\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `<lib-button [variant]=\"variant\" [disabled]=\"disabled\">Text Button</lib-button>`,\r\n  }),\r\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/.storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\r\n  stories: ['../**/*.@(mdx|stories.@(js|jsx|ts|tsx))'],\r\n  addons: ['@storybook/addon-essentials', '@storybook/addon-interactions'],\r\n  framework: {\r\n    name: '@storybook/angular',\r\n    options: {},\r\n  },\r\n  docs: {\r\n    autodocs: true,\r\n    defaultName: 'Docs',\r\n  },\r\n}"
                }
            ],
            "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<RichTextAreaComponent>",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "libs/ngx-tailwind-flex-ui/.storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomStyled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Text",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RichTextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "libs/ngx-tailwind-flex-ui/src/lib/richTextArea/richTextarea.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SaveData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}